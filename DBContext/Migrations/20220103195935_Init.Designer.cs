// <auto-generated />
using System;
using GOT.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GOT.DBContext.Migrations
{
    [DbContext(typeof(GOTContext))]
    [Migration("20220103195935_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("got")
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("GOT.Models.Odznaka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PunktyPrzeniesione")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rodzaj")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stopien")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UzytkownikID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WymaganePunkty")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UzytkownikID");

                    b.ToTable("Odznaki");
                });

            modelBuilder.Entity("GOT.Models.PunktTrasy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DlugoscGeo")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("SzerokoscGeo")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("WysokoscNPM")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("ID");

                    b.HasIndex("Nazwa")
                        .IsUnique();

                    b.ToTable("PunktyTrasy");
                });

            modelBuilder.Entity("GOT.Models.Rola", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Nazwa = "Turysta"
                        },
                        new
                        {
                            ID = 2,
                            Nazwa = "Przodownik"
                        },
                        new
                        {
                            ID = 3,
                            Nazwa = "Pracownik PTTK"
                        });
                });

            modelBuilder.Entity("GOT.Models.TerenGorski", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("TerenyGorskie");
                });

            modelBuilder.Entity("GOT.Models.Trasa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Dlugosc")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PunktKoncowyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PunktStartowyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PunktyZaTrase")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusTrasy")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SumaPodejsc")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TerenGorskiID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PunktKoncowyID");

                    b.HasIndex("PunktStartowyID");

                    b.HasIndex("TerenGorskiID");

                    b.ToTable("Trasy");
                });

            modelBuilder.Entity("GOT.Models.Utrudnienie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataWystapienia")
                        .HasColumnType("datetime");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("varcahr(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TrasaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeryfikujacyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZglaszajacyID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Zweryfikowane")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TrasaID");

                    b.HasIndex("WeryfikujacyID");

                    b.HasIndex("ZglaszajacyID");

                    b.ToTable("Utrudnienia");
                });

            modelBuilder.Entity("GOT.Models.Uzytkownik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NrPrzodownika")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumerLegitymacji")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RolaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RolaID");

                    b.HasIndex("Email", "NumerLegitymacji", "NrPrzodownika")
                        .IsUnique();

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("GOT.Models.Wycieczka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutorID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyPubliczna")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataUtworzeznia")
                        .HasColumnType("datetime");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("AutorID");

                    b.ToTable("Wycieczki");
                });

            modelBuilder.Entity("GOT.Models.Zdjecie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Dane")
                        .HasColumnType("BLOB");

                    b.Property<string>("Nazwa")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ZgloszenieWycieczkiID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ZgloszenieWycieczkiID");

                    b.ToTable("Zdjecia");
                });

            modelBuilder.Entity("GOT.Models.ZgloszenieWycieczki", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataOdbyciaWycieczki")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataZgloszenia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataZmianyStatusu")
                        .HasColumnType("datetime");

                    b.Property<int>("OdznakaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrzodownikID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Punkty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurystaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WycieczkaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OdznakaID");

                    b.HasIndex("PrzodownikID");

                    b.HasIndex("TurystaID");

                    b.HasIndex("WycieczkaID");

                    b.ToTable("ZgloszeniaWycieczek");
                });

            modelBuilder.Entity("PunktTrasyTerenGorski", b =>
                {
                    b.Property<int>("PunktyTrasyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TerenyGorskieID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PunktyTrasyID", "TerenyGorskieID");

                    b.HasIndex("TerenyGorskieID");

                    b.ToTable("PunktTrasyTerenGorski");
                });

            modelBuilder.Entity("TrasaWycieczka", b =>
                {
                    b.Property<int>("TrasyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WycieczkiID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrasyID", "WycieczkiID");

                    b.HasIndex("WycieczkiID");

                    b.ToTable("TrasaWycieczka");
                });

            modelBuilder.Entity("GOT.Models.Odznaka", b =>
                {
                    b.HasOne("GOT.Models.Uzytkownik", "Uzytkownik")
                        .WithMany("Odznaki")
                        .HasForeignKey("UzytkownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("GOT.Models.Trasa", b =>
                {
                    b.HasOne("GOT.Models.PunktTrasy", "PunktKoncowy")
                        .WithMany()
                        .HasForeignKey("PunktKoncowyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.PunktTrasy", "PunktStartowy")
                        .WithMany()
                        .HasForeignKey("PunktStartowyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.TerenGorski", "TerenGorski")
                        .WithMany()
                        .HasForeignKey("TerenGorskiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PunktKoncowy");

                    b.Navigation("PunktStartowy");

                    b.Navigation("TerenGorski");
                });

            modelBuilder.Entity("GOT.Models.Utrudnienie", b =>
                {
                    b.HasOne("GOT.Models.Trasa", "Trasa")
                        .WithMany()
                        .HasForeignKey("TrasaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Uzytkownik", "Weryfikujacy")
                        .WithMany()
                        .HasForeignKey("WeryfikujacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Uzytkownik", "Zglaszajacy")
                        .WithMany()
                        .HasForeignKey("ZglaszajacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trasa");

                    b.Navigation("Weryfikujacy");

                    b.Navigation("Zglaszajacy");
                });

            modelBuilder.Entity("GOT.Models.Uzytkownik", b =>
                {
                    b.HasOne("GOT.Models.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rola");
                });

            modelBuilder.Entity("GOT.Models.Wycieczka", b =>
                {
                    b.HasOne("GOT.Models.Uzytkownik", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("GOT.Models.Zdjecie", b =>
                {
                    b.HasOne("GOT.Models.ZgloszenieWycieczki", null)
                        .WithMany("Zdjecia")
                        .HasForeignKey("ZgloszenieWycieczkiID");
                });

            modelBuilder.Entity("GOT.Models.ZgloszenieWycieczki", b =>
                {
                    b.HasOne("GOT.Models.Odznaka", "Odznaka")
                        .WithMany()
                        .HasForeignKey("OdznakaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Uzytkownik", "Przodownik")
                        .WithMany()
                        .HasForeignKey("PrzodownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Uzytkownik", "Turysta")
                        .WithMany()
                        .HasForeignKey("TurystaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Wycieczka", "Wycieczka")
                        .WithMany()
                        .HasForeignKey("WycieczkaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Odznaka");

                    b.Navigation("Przodownik");

                    b.Navigation("Turysta");

                    b.Navigation("Wycieczka");
                });

            modelBuilder.Entity("PunktTrasyTerenGorski", b =>
                {
                    b.HasOne("GOT.Models.PunktTrasy", null)
                        .WithMany()
                        .HasForeignKey("PunktyTrasyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.TerenGorski", null)
                        .WithMany()
                        .HasForeignKey("TerenyGorskieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrasaWycieczka", b =>
                {
                    b.HasOne("GOT.Models.Trasa", null)
                        .WithMany()
                        .HasForeignKey("TrasyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GOT.Models.Wycieczka", null)
                        .WithMany()
                        .HasForeignKey("WycieczkiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GOT.Models.Uzytkownik", b =>
                {
                    b.Navigation("Odznaki");
                });

            modelBuilder.Entity("GOT.Models.ZgloszenieWycieczki", b =>
                {
                    b.Navigation("Zdjecia");
                });
#pragma warning restore 612, 618
        }
    }
}
